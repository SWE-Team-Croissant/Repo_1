// Health Summary functionality module

// Generate health summary
async function generateHealthSummary() {
    const summaryTimeframe = document.getElementById('summary-timeframe').value;
    const summaryContent = document.getElementById('summary-content');
    const summaryLoading = document.getElementById('summary-loading');
    const summaryResults = document.getElementById('summary-results');
    const summaryDateRange = document.getElementById('summary-date-range');

    summaryLoading.classList.remove('hidden');
    summaryResults.classList.add('hidden');

    try {
        const summary = await api.getHealthSummary(summaryTimeframe);

        // Update date range
        summaryDateRange.textContent = `${formatTableDate(summary.timeframe.start_date)} - ${formatTableDate(summary.timeframe.end_date)}`;

        // Populate vital statistics
        const vitalStatistics = document.getElementById('vital-statistics');
        let vitalHtml = '';
        
        if (Object.keys(summary.vitals).length === 0) {
            vitalHtml = '<p>No vital data available for this time period.</p>';
        } else {
            Object.keys(summary.vitals).forEach(vitalType => {
                const vital = summary.vitals[vitalType];
                vitalHtml += `
                    <div class="summary-item">
                        <h5>${formatVitalTypeName(vitalType)}</h5>
                        <p>Count: ${vital.count}</p>
                        <p>Average: ${vital.average.toFixed(2)} ${vital.unit}</p>
                        <p>Min: ${vital.min} ${vital.unit}</p>
                        <p>Max: ${vital.max} ${vital.unit}</p>
                        <p>Abnormal Count: ${vital.abnormal_count}</p>
                    </div>
                `;
            });
        }
        vitalStatistics.innerHTML = vitalHtml;

        // Populate symptom frequency
        const symptomStatistics = document.getElementById('symptom-statistics');
        let symptomHtml = '';
        
        if (summary.symptoms.total_count === 0) {
            symptomHtml = '<p>No symptom data available for this time period.</p>';
        } else {
            Object.keys(summary.symptoms.frequency).forEach(symptomName => {
                const symptom = summary.symptoms.frequency[symptomName];
                symptomHtml += `
                    <div class="summary-item">
                        <h5>${formatSymptomName(symptomName)}</h5>
                        <p>Count: ${symptom.count}</p>
                        <p>Average Severity: ${symptom.average_severity.toFixed(2)}/10</p>
                    </div>
                `;
            });
        }
        symptomStatistics.innerHTML = symptomHtml;

        // Populate alert summary
        const alertStatistics = document.getElementById('alert-statistics');
        alertStatistics.innerHTML = `
            <p>Total Alerts: ${summary.alerts.count}</p>
            <p class="mt-2">The health summary covers a ${summaryTimeframe}-day period and provides an overview 
            of recorded vitals, symptoms, and any alerts generated by the system.</p>
        `;

        summaryLoading.classList.add('hidden');
        summaryResults.classList.remove('hidden');

    } catch (error) {
        summaryLoading.classList.add('hidden');
        summaryResults.classList.add('hidden');
        showToast('Failed to generate health summary', 'error');
        console.error('Failed to generate health summary:', error);
    }
}

// Export summary as PDF
document.getElementById('export-summary-btn').addEventListener('click', async () => {
    try {
        showToast('Preparing PDF for download...', 'info');
        
        // In a real application, we would implement PDF generation here
        // For this example, we'll simulate a delay
        setTimeout(() => {
            showToast('Health summary exported successfully', 'success');
        }, 1500);
        
    } catch (error) {
        showToast('Failed to export summary', 'error');
        console.error('Export error:', error);
    }
});

// Add event listener for generate summary button
const generateSummaryBtn = document.getElementById('generate-summary-btn');
generateSummaryBtn.addEventListener('click', generateHealthSummary);

// Helper function to format vital type names
function formatVitalTypeName(vitalType) {
    const names = {
        heart_rate: 'Heart Rate',
        blood_pressure_systolic: 'Blood Pressure (Systolic)',
        blood_pressure_diastolic: 'Blood Pressure (Diastolic)',
        temperature: 'Temperature',
        oxygen_saturation: 'Oxygen Saturation'
    };

    return names[vitalType] || vitalType.replace(/_/g, ' ');
}

// Helper function to format symptom names
function formatSymptomName(symptomName) {
    return symptomName.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
}

// Helper function to format table dates
function formatTableDate(dateString) {
    const options = {
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    };
    return new Date(dateString).toLocaleDateString(undefined, options);
}

// Generate visualizations for the health summary
function generateSummaryCharts(summaryData) {
    // This function would create charts based on the summary data
    // Implementation would use Chart.js or similar library
    console.log('Generating charts for summary data:', summaryData);
}
